---
title: "Lidar Summary metrics"
---

```{r, echo = FALSE, warnings = FALSE}
library(rgl)

r3dDefaults <- rgl::r3dDefaults
m <- structure(c(0.921, -0.146, 0.362, 0, 0.386, 0.482, -0.787, 0, 
                -0.06, 0.864, 0.5, 0, 0, 0, 0, 1), .Dim = c(4L, 4L))
r3dDefaults$FOV <- 50
r3dDefaults$userMatrix <- m
r3dDefaults$zoom <- 0.75

knitr::opts_chunk$set(
  comment =  "#>", 
  collapse = TRUE,
  fig.align = "center")

rgl::setupKnitr(autoprint = TRUE) 
options(lidR.progress = FALSE)
```

## Relevant Resources

-   [Code](https://github.com/liamirwin/LPS_lidRtutorial/blob/master/R/03_aba.R)
-   [lidRbook metrics section](https://r-lidar.github.io/lidRbook/grid_metrics.html)
-   [lidRbook modelling section](https://r-lidar.github.io/lidRbook/modelling.html)
-   [lidRmetrics package for additional metrics](https://ptompalski.github.io/lidRmetrics/ "Tutorial website for lidRmetrics package")

## Overview

This code demonstrates an example of generating **pixel-based summary metrics** of LiDAR data. This is a common task to capture critical information describing the vertical distribution of lidar returns across a regular grid (raster). Pixel metrics are used in various predictive modelling tasks and often used to capture critical vegetation characteristics ranging from height to variability and cover. 

Beyond statistical summary metrics such as (*mean*, *max*, *sd*, etc), many researchers have developed custom metrics linked to critical vegetation attributes such as **leaf-area index**, **vertical complexity indices**, etc. These metrics can also be generated with `lidR` using **voxel approaches**, where three-dimensional sub-compartments are fit to better capture complexity â€” at the cost of vastly increasing computational requirements and introducing additional parameters.

Classically, lidar metrics used in vegetation characterization typically fall under three categories:

1.  **Height metrics**\
    These typically describe how tall the vegetation generally is. Often max height, mean height, and percentiles of height are important in the prediction of attributes including land cover, and continuous variables like biomass.

2.  **Variability metrics**\
    Metrics describing the shape of the distribution of returns often capture additional signals useful for explaining the level of vegetation complexity within a pixel. Skewed versus bimodal distributions, for example, can represent a very dense upper canopy in a forest compared to a multi-layer stand.

3.  **Cover metrics**\
    Often referred directly to as *canopy cover*, these metrics generally describe the proportion of returns (as a %) above a certain threshold. Typically used to generally describe how much vegetation (e.g. above 2m) there is compared to ground and other lower surfaces (designed for forest).

Basic usage involves computing mean and max height of points within 10x10 m pixels and visualizing the results. The code shows how to compute multiple metrics simultaneously and use predefined metric sets. Advanced usage introduces user-defined metrics for more specialized calculations.

![](img/als_metrics_cs.png)

## Environment

```{r clear warnings, warnings = FALSE, message=FALSE}
# Clear environment
rm(list = ls(globalenv()))

# Load packages
library(lidR)
library(sf)
library(lidRmetrics)
```

## Basic Usage

We'll cover the basic usage of the `lidR` package to compute metrics from LiDAR data.

```{r load_lidar_data}
# Load the normalized LiDAR data
las <- readLAS(files = "data/zrh_norm.laz")
```

The `pixel_metrics()` function calculates structural metrics within a defined spatial resolution (`res`).

```{r mean_height_pixel_metrics}
# Compute the mean height of points within 10x10 m pixels
hmean <- pixel_metrics(las = las, func = ~mean(Z), res = 10)
hmean
plot(hmean)
```

```{r max_height_pixel_metrics}
# Compute the max height of points within 10x10 m pixels
hmax <- pixel_metrics(las = las, func = ~max(Z), res = 10)
hmax
plot(hmax)
```

You can specify that multiple metrics should be calculated by housing them in a `list()`.

```{r multiple_metrics_pixel_metrics}
# Compute several metrics at once using a list
metrics <- pixel_metrics(las = las, func = ~list(hmax = max(Z), hmean = mean(Z)), res = 10)
metrics
plot(metrics)
```

Pre-defined metric sets are available, such as `.stdmetrics_z`. See more [here](https://github.com/r-lidar/lidR/wiki/stdmetrics).

```{r predefined_metrics_pixel_metrics}
# Simplify computing metrics with predefined sets of metrics
metrics <- pixel_metrics(las = las, func = .stdmetrics_z, res = 10)
metrics
plot(metrics)

# Plot a specific metric from the predefined set
plot(metrics, "zsd")
```

## Advanced Usage with User-Defined Metrics

::: callout-tip
## [3rd party LiDAR metrics packages](https://r-lidar.github.io/lidRbook/metrics.html#metrics-3rd-party)

`lidR` provides flexibility for users to define custom metrics. Check out 3rd party packages like [`lidRmetrics`](https://github.com/ptompalski/lidRmetrics) for suites of advanced metrics typically demonstrated in peer-reviewed articles and implemented in `lidR` through [`lidRmetrics`](https://github.com/ptompalski/lidRmetrics).
:::

[Canopy Cover](https://ptompalski.github.io/lidRmetrics/reference/metrics_percabove.html "Proportion of returns above a threshold (2m) is commonly used to approximate canopy cover in forests and beyond")

```{r canopy_cover}
cc_metrics <- pixel_metrics(las, func = ~metrics_percabove(z = Z, threshold = 2, zmin = 0), res = 10)
plot(cc_metrics)
```

[Leaf Area Density Profiles](https://ptompalski.github.io/lidRmetrics/reference/metrics_lad.html "LAD profiles are commonly used in predictive modelling to approximate the leaf area index (LAI) of vegetation with LiDAR") ([Bouvier et al. 2015](http://dx.doi.org/10.1016/j.rse.2014.10.004 "Journal article credited with LAD metrics formulae"))

```{r lad_metrics}
lad_metrics <- pixel_metrics(las, ~metrics_lad(z = Z), res = 10)
plot(lad_metrics)
```

We can also create our own user-defined metric functions. This demonstrates the flexibility of the `lidR` package!

```{r user_defined_metric_pixel_metrics}
# Generate a user-defined function to compute weighted mean between two attributes
f <- function(x, weight) { sum(x*weight)/sum(weight) }

# Compute weighted mean of height (Z) as a function of return intensity
user_metric <- pixel_metrics(las = las, func = ~f(Z, Intensity), res = 10)

# Visualize the output
plot(user_metric)
```

## Exercises and Questions

Using:

``` r
las <- readLAS("data/zrh_norm.laz")
```

#### E1.

Assuming that biomass is estimated using the equation `B = 0.5 * mean Z + 0.9 * 90th percentile of Z` applied on first returns only, map the biomass.

#### E2.

Map the density of ground returns at a 5 m resolution with `pixel_metrics(filter = ~Classification == LASGROUND)`.

#### E3.

Map pixels that are flat (planar) using `stdshapemetrics`. These could indicate potential roads.

## Conclusion

In this tutorial, we covered basic usage of the `lidR` package for computing mean and max heights within grid cells and using predefined sets of metrics. Additionally, we explored the advanced usage with the ability to define user-specific metrics for grid computation.
